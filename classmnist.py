# -*- coding: utf-8 -*-
"""ClassMNIST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WcsjvxpJAz13Ccccg7giKlA0z-OYBDMq
"""

from sklearn.datasets import fetch_openml
import numpy as np, matplotlib.pyplot as plt
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import StratifiedKFold, cross_val_score
from sklearn.base import clone
from sklearn.base import BaseEstimator
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score, precision_recall_curve, roc_curve, roc_auc_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.multiclass import OneVsRestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
# Fetch the MNIST dataset
mnist = fetch_openml('mnist_784', version=1)

# Convert dict_keys to a list for compatibility with Python 3.7 and earlier
keys_list = list(mnist.keys())

# Now you can use keys_list in your code
keys_list

X, y = mnist['data'], mnist['target']
X.shape

some_digit = X.iloc[0]  # Use .iloc[0] to access the first row
some_digit_image = some_digit.to_numpy().reshape(28, 28)

# plt.imshow(some_digit_image, cmap='binary')
# plt.axis('off')
# plt.show()
y[0]
y = y.astype(np.uint8)
X_train, X_test, y_train, y_test = X[:60000], X[60000:], y[:60000], y[60000:]
y_train_5 = (y_train == 5)  # true for all fives and false for all other digits
y_test_5 = (y_test == 5)

# Reset index before splitting
X_train.reset_index(drop=True, inplace=True)
y_train_5.reset_index(drop=True, inplace=True)

# Training binary classifier
sgd_clf = SGDClassifier(random_state=42)
sgd_clf.fit(X_train, y_train_5)
sgd_clf.predict([some_digit])  # images of 5 can be detected

# using cross-validation to evaluate model
skfolds = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)

for train_index, test_index in skfolds.split(X_train, y_train_5):
    clone_clf = clone(sgd_clf)
    X_train_folds = X_train.loc[train_index]
    y_train_folds = y_train_5.loc[train_index]
    X_test_fold = X_train.loc[test_index]
    y_test_fold = y_train_5.loc[test_index]

    clone_clf.fit(X_train_folds, y_train_folds)
    y_pred = clone_clf.predict(X_test_fold)
    n_correct = sum(y_pred == y_test_fold)
    accuracy = n_correct / len(y_pred)
    #print(accuracy)

# Now, use cross_val_score with the original features
cross_val_score(sgd_clf, X_train, y_train_5, cv=3, scoring='accuracy')

class NeverSClassifier(BaseEstimator):
  def fit(self, X, y=None):
    return self
  def predict(self, X):
    return np.zeros((len(X), 1), dtype=bool)
never_5_clf = NeverSClassifier()
#cross_val_score(never_5_clf, X_train, y_train_5, cv=3, scoring='accuracy')

#Each row in a confusion matrix represents an actual class, while each column repre‐
#sents a predicted class
#: 53,057 of them were correctly classified as non-5s (they are called true
#negatives), while the remaining 1,522 were wrongly classified as 5s (false positives).
#The second row considers the images of 5s (the positive class): 1,325 were wrongly
#classified as non-5s (false negatives), while the remaining 4,096 were correctly classi‐
#fied as 5s (true positives)
y_train_pred = cross_val_predict(sgd_clf, X_train, y_train_5, cv=3)
#confusion_matrix(y_train_5, y_train_pred)

y_train_perfect_predictions = y_train_5   # pretend we reached perfection
#confusion_matrix(y_train_5, y_train_perfect_predictions)

#check note for explanation
#precision_score(y_train_5, y_train_pred)
#recall_score(y_train_5, y_train_pred)
#f1_score(y_train_5, y_train_pred)

#to make the outcome favourable to one part than the other
y_scores = sgd_clf.decision_function([some_digit])
threshold = 0
y_some_digit_pred = (y_scores > 0)

threshold = 8000
y_some_digit_pred = (y_scores > threshold)

#to decide which threshold to use - get the score for all instances but returning decision scores
y_scores = cross_val_predict(sgd_clf, X_train, y_train_5, cv=3, method="decision_function")

precisions, recalls, thresholds = precision_recall_curve(y_train_5, y_scores)

def plot_precision_recall_vs_threshold(precisions, recalls, thresholds):
  plt.plot(thresholds, precisions[:-1], 'b--', label='Precision')
  plt.plot(thresholds, recalls[:-1], 'g-', label='Recall')
  plt.xlabel('Threshold')
  plt.ylabel('Score')
  plt.title('Precision-Recall vs. Threshold Curve')
  plt.legend()
  plt.grid(True)

plot_precision_recall_vs_threshold(precisions, recalls, thresholds)
threshold_value = 0
plt.axvline(x=threshold_value, color='red', linestyle='--', label=f'Threshold = {threshold_value}')
plt.legend()
#plt.show()
plt.close()

#to search for the lowest threshold that will yield at least 90% accuracy
threshold_90_precision = thresholds[np.argmax(precisions[:-1]>= 0.90)]
y_train_pred_90 = (y_scores >= threshold_90_precision)
#precision_score(y_train_5, y_train_pred_90)
#recall_score(y_train_5, y_train_pred_90)

fpr, tpr, thresholds_roc = roc_curve(y_train_5, y_scores)
def plot_roc_curve(fpr, tpr, label=None):
  plt.plot(fpr, tpr, linewidth=2, label=label)
  plt.plot([0, 1], [0, 1], 'k--')
  plt.xlabel('Sensitivity')
  plt.ylabel('False positive rate')
  plt.legend(loc='lower right')
  plt.grid(True)

plot_roc_curve(fpr, tpr)

#A perfect classifier will have a ROC AUC equal to 1, whereas a purely random classifier will have a ROC AUC equal to 0.5-- AUC is Area Under Curve
roc_auc_score(y_train_5, y_scores)

#using random forest to compare it's ROC curve against SGDClassifier
forest_clf = RandomForestClassifier(random_state=42)
y_probas_forest = cross_val_predict(forest_clf, X_train, y_train_5, cv=3, method='predict_proba')
y_scores_forest = y_probas_forest[:, 1]
fpr_forest, tpr_forest, thresholds_forest = roc_curve(y_train_5, y_scores_forest)
plt.plot(fpr, tpr, 'b:', label='SGD')
plot_roc_curve(fpr_forest, tpr_forest, 'Random Forest')
plt.legend(loc='lower right')
plt.show()

#for the ROC AUC
# Threshold for classification (you can adjust this value based on your needs)
threshold_value = 0.5

# Convert predicted probabilities to binary labels
y_pred_forest_binary = (y_scores_forest > threshold_value)

# Compute precision and ROC AUC score with binary labels
#precision_forest = precision_score(y_train_5, y_pred_forest_binary)
#roc_auc_forest = roc_auc_score(y_train_5, y_scores_forest)

#therefore, it is more superior to the SGD since it is closer to the TPR than SGD

#multiclassification--- For more than one number class
#scikit-learn automatically detects when you try to use binary classification and automatically choose, OvR(One vs. Rest-each number has a classifier,
# say, 1-classifier, 2-classifier... against the rest of the numbers) Or OvO(One vs. One. i.e, 1s against 2s, 1s against 3s) depending on the algorithm
svm_clf =SVC()
svm_clf.fit(X_train, y_train)
svm_clf.predict([some_digit])

#scikit-learn uses decision_function to get the highest d_f...
some_digit_scores = svm_clf.decision_function([some_digit])
#some_digit_scores

#...which falls on 5
np.argmax(some_digit_scores)
svm_clf.classes_

#to force scikit-learn to use either OvO or OvR
ovr_clf = OneVsRestClassifier(SVC())
ovr_clf.fit(X_train, y_train)
ovr_clf.predict([some_digit])
#training SGDClassifier
sgd_clf.fit(X_train, y_train)
sgd_clf.predict([some_digit])

#scores assigned by SGD
sgd_clf.decision_function([some_digit])

#since the result for row 3 is positive also, we'll check the accuracy
#cross_val_score(sgd_clf, X_train, y_train, cv=3, scoring='accuracy')

#since accuracy is under 89%, in reference to previous code... the next step gets it to higher accuracy
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train.astype(np.float64))
cross_val_score(sgd_clf, X_train_scaled, y_train, cv=3, scoring='accuracy')

#error analysis for model use
y_train_pred = cross_val_predict(sgd_clf, X_train_scaled, y_train, cv=3)
conf_matrix = confusion_matrix(y_train, y_train_pred)
conf_matrix

plt.matshow(conf_matrix, cmap=plt.cm.gray)
#plt.show()
#note- rows represent actual classes, column represent predicted values

#from the result of the above, it shows that 5 isn't well represented in the plot since it has the lowest numbers. An error rate is computed to find out
row_sums = conf_matrix.sum(axis=1, keepdims=True)
norm_conf_mx = conf_matrix / row_sums

#filling the diagonals with zero to keep only the errors and plot the result
np.fill_diagonal(norm_conf_mx, 0)
plt.matshow(norm_conf_mx, cmap=plt.cm.gray)
plt.show()
#the result shows there is more result on 8 which shows, many numbers have been wrongly classified as 8. Though, the rows for 8 are alright
#3s and 5s also got confused in both directions
#the solution is to filter it out the numbers that look like 8 but aren't- different methods can be used

#to find out the numbers that are the 3s and 5s to see the ones that look like 8
cl_a, cl_b = 3, 5
X_aa = X_train[(y_train == cl_a) & (y_train_pred == cl_a)]
X_ab = X_train[(y_train == cl_a) & (y_train_pred == cl_b)]
X_ba = X_train[(y_train == cl_b) & (y_train_pred == cl_a)]
X_bb = X_train[(y_train == cl_b) & (y_train_pred == cl_b)]

def plot_digits(instances, images_per_row=10, **options):
    size = 28
    images_per_row = min(len(instances), images_per_row)
    images = [instance.reshape(size,size) if isinstance(instance, np.ndarray) else np.array(instance).reshape(size,size) for instance in instances]
    n_rows = (len(instances) - 1) // images_per_row + 1
    row_images = []
    n_empty = n_rows * images_per_row - len(instances)
    images.append(np.zeros((size, size * n_empty)))
    for row in range(n_rows):
        rimages = images[row * images_per_row : (row + 1) * images_per_row]
        row_images.append(np.concatenate(rimages, axis=1))
    image = np.concatenate(row_images, axis=0)
    plt.imshow(image, cmap='binary', **options)
    plt.axis("off")

plt.figure(figsize=(8,8))
plt.subplot(221); plot_digits(X_aa[:25], images_per_row=5)
plt.subplot(222); plot_digits(X_ab[:25], images_per_row=5)
plt.subplot(223); plot_digits(X_ba[:25], images_per_row=5)
plt.subplot(224); plot_digits(X_bb[:25], images_per_row=5)
plt.show()
#it displays a 5x5 matrix for 3s and 5s
#Some of the digits that the classifier gets wrong  in the bottom-left and top-right blocks
#The reason is that we used a simple SGDClassifier, which is a linear model. All it does is assign a weight per class to each pixel, and when it sees a new...
#...image it just sums up the weighted pixel intensities to get a score for each class. So since 3s and 5s differ only by a few pixels, this model will easily confuse them.
#So one way to reduce the 3/5 confusion would be to preprocess the images to ensure that they are well centered and not too rotated

#multilabel classification- recognizing numbers
y_train_large = (y_train >= 7)
y_train_odd = (y_train % 2 == 1)
y_multilabel = np.c_[y_train_large, y_train_odd]#the first indicates whether or not the digit is large (7, 8, or 9), and the second indicates whether or not it is odd

knn_clf = KNeighborsClassifier()
knn_clf.fit(X_train, y_multilabel)

#then we predict if some_digit[5] is not too large and odd
knn_clf.predict([some_digit])# it prints True, False which is true

#evaluating the multilabel classifier
y_train_knn_pred = cross_val_predict(knn_clf, X_train, y_multilabel, cv=3)
f1_score(y_multilabel, y_train_knn_pred, average = 'macro')#the output shows it's very accurate

#multioutput classification
#first the noises from the image is removed
#Let’s start by creating the training and test sets by taking the MNIST images and adding noise to their pixel intensities with NumPy’s randint() function.....
#....The target images will be the original images
noise = np.random.randint(0, 100, (len(X_train), 784))
X_train_mod = X_train + noise
noise = np.random.randint(0, 100, (len(X_test), 784))
X_test_mod = X_test + noise
y_train_mod = X_train
y_test_mod = X_test
#it prints a number with nosie and the ones without noise

# Define a function to plot a single digit
def plot_digit(data):
    image = data.reshape(28, 28)
    plt.imshow(image, cmap='binary')
    plt.axis("off")
    plt.show()

# Assign a value to some_index (for example, the index 0)
some_index = 0

#now we clean the image
knn_clf.fit(X_train_mod, y_train_mod)
clean_digit = knn_clf.predict([X_test_mod[some_index]])
clean_digit = clean_digit.reshape(28, 28)
plot_digit(clean_digit)
#the result is a 4 without noise